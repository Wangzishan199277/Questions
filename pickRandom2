#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

struct PickRandom{
    vector<int> value; 
    unordered_map<int, int> hash; 
    void insert(int val){ 
        if(hash.find(val) == hash.end()) { 
            value.push_back(val); 
            int position = value.size()-1; 
            hash[val] = position; } 
        
    } 
    bool Contains(int val) { 
        return hash.find(val) != hash.end();
    } 
    void Delete(int val) { 
        if(hash.find(val) == hash.end()) {
            return; 
            
        } 
        int position_val = hash[val]; 
        int position_last = hash[value.back()]; 
        hash[value.back()] = position_val; 
        swap(value[position_val], value[position_last]); 
        value.pop_back(); hash.erase(val); 
        
    } 
    int pickRandom() { 
        if(value.size() == 0) { 
            return -1; 
        } 
    int pos = rand()%value.size(); 
    return value[pos]; 
        
    } 
};

int main()
{
    PickRandom temp;
    for(int i = 1; i <= 10; i++) {
        temp.insert(i);
    }
    cout << "Test for Contains" << endl;
    cout << temp.Contains(11) << endl;
    for(int i = 1; i <= 10; i++) {
        cout << temp.Contains(i) << " ";
    }
    cout <<endl;
    cout << endl;
    cout << "output the value" << endl;
    for(int &elem : temp.value) {
        cout << elem << " ";
    }
    cout <<endl;
    cout <<endl;
    temp.Delete(3);
    cout << "case after delete of 3"<<endl;
    for(int &elem : temp.value) {
        cout << elem << " ";
    }
    cout << endl;
    cout <<endl;
    cout << "hash value of 10 is " << (temp.hash)[10] <<endl;
    cout << endl;
    cout <<"value of 100 pickRandom()"<<endl;
    for(int i = 0; i < 100; i ++) {
        cout << temp.pickRandom() << " ";
    }
}

Test for Contains
0
1 1 1 1 1 1 1 1 1 1 

output the value
1 2 3 4 5 6 7 8 9 10 

case after delete of 3
1 2 10 4 5 6 7 8 9 

hash value of 10 is 2

value of 100 pickRandom()
2 8 1 8 6 8 2 4 7 2 6 5 6 8 6 5 7 1 8 2 9 9 7 7 9 9 9 5 2 2 6 1 1 4 6 4 2 8 5 8 7 1 1 10 6 5 6 10 10 4 10 2 2 9 9 1 6 6 5 5 7 1 6 7 10 9 8 4 5 10 1 1 1 1 10 7 10 6 7 6 8 7 7 9 6 4 7 10 9 2 7 7 9 1 2 2 8 1 4 10  


